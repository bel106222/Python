# переопределение методов классов
# class Proparent:

#     def say_goodday():
#         print("Good day from proparent!")

# class Parent:
    
#     def say_hello():
#         print("Hello from parent class")

#     def say_bye():
#         print("Bye from parent class")

# class Child(Parent,Proparent):
    
#     def say_hello():
#         print("Hello from child class")
    
#     def say_goodbye():
#         print("Bye from child class")


# child = Child
# child.say_hello()
# child.say_bye()
# child.say_goodbye()
# child.say_goodday()
###############################################################
# переопределяем методы стандартного класса List(список):
# class ProList(list):
    
#     def append(self, object):
#         for i in range(len(self)):
#             self[i] **= object
    
#     def pop(self, index = -1):
#         for i in range(len(self)):
#             print(i,index)
#             self[i] += index
            
# p_list = ProList([1,2,3])
# print(p_list)
# p_list.append(3)
# print(p_list)
# p_list.pop(2)
# print(p_list)
#################################################################
# перегрузка операторов
class Test(int):
    
    def __init__(self, num) -> None:
        super().__init__()
        self.num = num

    def __add__(self, num2):
        return self.num * num2

    def __mul__(self, num2):
        return self.num + num2

    def __sub__(self, num2):
        return self.num / num2

    def __truediv__(self, num2):
        return self.num - num2

a = Test(5)
print(a + 10)
print(a * 2)
print(a - 2)
print(a / 3)