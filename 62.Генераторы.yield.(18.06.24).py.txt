#for i in range(1,10):
    #print(i)
#######################
#y = range(1,10)
#for i in y:
#    print(i)
#######################
# class MyClass:

#     def __init__(self, start):
#         self.start = start
    
#     def __iter__(self):
#         n = self.start
#         while n > 0:
#             yield n
#             n -= 1
#             print('n=',n)

# obj = MyClass(5)
# for i in obj.__iter__():
#     print(i)

# print(next(obj.__iter__()))
# print(next(obj.__iter__()))
# print(next(obj.__iter__()))
######################################
# def gen1(stop):
#     n=1
#     while n <= stop:
#         yield n
#         n += 1

# def gen2(start):
#     n=start
#     while n > 0:
#         yield n
#         n -= 1

# def func(n):
#     yield from gen1(n)
#     yield from gen2(n)

# for i in func(5):
#     print(i,end=' ')
########################################
# numbers = [1, 2, [3, [4, 5], 6, 7], [8, 9], 0]
# def func(n):
#     for i in n:
#         if isinstance(i, list):
#             yield from func(i)
#         else:
#             yield i

# for i in func(numbers):
#     print(i,end=' ')
#########################################
# def func():
#     while True:
#         n = yield # ожидание аргумента в функцию

# obj = func()
# obj.send(None)
# obj.send(1)
# obj.send(2)
# obj.send(6)
#########################################
# def func():
#     data = bytearray()
#     line = None
#     linecount = 0
#     while True:
#         part = yield line
#         linecount += part.count(b'\n')
#         data.extend(part)
#         if linecount > 0:
#             index = data.index(b'\n')
#             line = bytes(data[:index+1])
#             data = data[index+1:]
#             linecount -= 1
#         else:
#             line = None
# obj = func()
# print(obj.send(None))
# print(obj.send(b'hello'))
# print(obj.send(b' my '))
# print(obj.send(b'world\nit '))
# print(obj.send(b'works!'))
# print(obj.send(b'\n'))
###########################################
# class MyClass:
#     def __init__(self):
#         self.data = bytearray()
#         self.linecount = 0
        
#     def send(self, part):
#         self.linecount += part.count(b'\n')
#         self.data.extend(part)
#         if self.linecount > 0:
#             index = self.data.index(b'\n')
#             line = bytes(self.data[:index+1])
#             self.data = self.data[index+1:]
#             self.linecount -= 1
#             return line
#         else:
#             return None

# obj = MyClass()
# print(obj.send(b'hello'))
# print(obj.send(b'world\nit '))
# ##############################################
from time import time

def decorator(func):
    def wrapper():
        start_time = time()
        func()
        end_time = time()
        print('Время генерации: {:.3f} секунд'.format(end_time - start_time)) 
    return wrapper

def func_gen(items):
    if len(items) == 0:
        yield []
    else:
        pi = items[:]
        for i in range(len(pi)):
            pi[0], pi[i] = pi[i], pi[0]
            for p in func_gen(pi[1:]):
                yield [pi[0]] + p

@decorator
def funct():
    for p in func_gen([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]):
        pass
        #print(p)

funct()