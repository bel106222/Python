# Задание 1
# Создайте класс Car, представляющий автомобиль. Класс должен иметь атрибуты:
# mark (марка автомобиля), model (модель автомобиля) и year (год выпуска).
# Реализуйте следующие методы и операторы для этого класса:
# 1. Метод __init__, который инициализирует автомобиль с заданными 
# значениями марки, модели и года выпуска.
# 2. Метод __str__, который возвращает строковое представление автомобиля
# в формате "год марка модель".
# 3. Метод сравнения автомобилей __eq__, который будет сравнивать
# автомобили по марке, модели и году выпуска.
# 4. Метод для проверки возраста автомобиля age, который будет возвращать
# количество лет с момента его выпуска.
print('ЗАДАНИЕ 1')
class Car:

    def __init__(self, mark, model, year):
        self.mark = mark
        self.model = model
        self.year = year

    def __str__(self):
        return (f'{self.year} {self.mark} {self.model}')

    def __eq__(self, other):
        answer = True
        if self.mark != other.mark:
            answer = False
        if self.model != other.model:
            answer = False
        if self.year != other.year:
            answer = False
        return answer

    def age(self):
        age = 2023 - self.year
        return age

# Создание объектов автомобилей
car1 = Car('Toyota', 'Corolla', 2015)
car2 = Car('Honda', 'Civic', 2018)

# Вывод информации об автомобилях
print(car1)
print(car2)

# Сравнение автомобилей
if car1 == car2:
    print('Автомобили oдинаковые')
else:
    print('Автомобили разные')

# Проверка возраста автомобиля
print(f'Проверка возраста автомобиля car1: {car1.age()} лет')
print(f'Проверка возраста автомобиля car2: {car2.age()} лет')
#######################################################################
# Задание 2
# создайте класс Point, представляющий точку на плоскости. 
# Класс должен иметь два атрибута: x и y, представляющие 
# координаты точки по осям х и у соответственно. Реализуйте
# следующие методы и операторы для этого класса:
# 1. Метод __init__, который инициализирует точку с
# заданными знаечениями координат.
# 2. Метод __str__, который возвращает строковое представление
# точки в формате "(x, y)".
# 3. Метод для перегрузки оператора сложения __add__, который
# позволит складывать две точки и возвращать новую точку,
# с координатами, равными сумме координат исходных точек.
# 4. Метод для вычисления расстояния между двумя точками
# distance_to, который будет возвращать расстояние между
# текущей точкой и переданной точкой.
print('\nЗАДАНИЕ 2')
class Point:
    
    def __init__(self, x, y):
        self.x = x
        self.y = y

    def __str__(self):
        return (f'({self.x}, {self.y})')

    def __add__(self, other):
        return Point(self.x + other.x, self.y + other.y)

    def distance_to(self, other):
        return (((self.x - other.x) ** 2 + (self.y - other.y) ** 2) ** 0.5)

# Создание объектов точек
point1 = Point(1, 2)
point2 = Point(3, 4)

# Вывод информации о точках
print('Первая точка ', end='')
print(point1)
print('Вторая точка ', end='')
print(point2)

# Сложение точек
print('Результат сложения этих точек: ', end='')
point3 = point1 + point2
print(point3)

# Вычисление расстояния между точками
print('Расстояние между точками:',point1, 'и', point3, 'равно', point1.distance_to(point3))
###########################################################################